#!/bin/bash

# devopsfetch - DevOps information retrieval tool

# Function to display help
display_help() {
    echo "Usage: devopsfetch [OPTION] [ARGUMENT]"
    echo "Collect and display system information for DevOps purposes."
    echo
    echo "Options:"
    echo "  -p, --port [PORT]     Display active ports or info about a specific port"
    echo "  -d, --docker [NAME]   List Docker images/containers or info about a specific container"
    echo "  -n, --nginx [DOMAIN]  Display Nginx domains or config for a specific domain"
    echo "  -u, --users [USER]    List users and last login times or info about a specific user"
    echo "  -t, --time START END  Display activities within a specified time range"
    echo "  -h, --help            Display this help message"
}

# Function to format output as a table
format_table() {
    column -t -s $'\t'
}

# Function to display ports information
display_ports() {
    if [ -z "$1" ]; then
        echo "Active Ports, Users, and Services:"
        printf "%-15s %-10s %-20s %-30s %-10s\n" "USER" "PORT" "SERVICE" "PROCESS" "PID"
        echo "---------------------------------------------------------------------------------------------------"
        sudo netstat -tulnp | awk 'NR>2 && $6 == "LISTEN" {
            split($4, a, ":");
            port = a[length(a)];
            pid_prog = $7;
            split(pid_prog, pp, "/");
            pid = pp[1];
            if (pid != "-") {
                cmd = "ps -o user=,comm=,cmd= -p " pid;
                cmd | getline info;
                close(cmd);
                split(info, b, " ");
                user = b[1];
                service = b[2];
                $1 = $2 = $3 = $4 = $5 = $6 = $7 = "";
                process = substr($0, 8);
                gsub(/^ +/, "", process);
                printf "%-15s %-10s %-20s %-30.30s %-10s\n", user, port, service, process, pid;
            }
        }'
    else
        echo "Details for Port $1:"
        printf "%-15s %-10s %-20s %-30s %-10s\n" "USER" "PORT" "SERVICE" "PROCESS" "PID"
        echo "---------------------------------------------------------------------------------------------------"
        sudo netstat -tulnp | awk -v port="$1" '$4 ~ ":"port"$" && $6 == "LISTEN" {
            pid_prog = $7;
            split(pid_prog, pp, "/");
            pid = pp[1];
            if (pid != "-") {
                cmd = "ps -o user=,comm=,cmd= -p " pid;
                cmd | getline info;
                close(cmd);
                split(info, b, " ");
                user = b[1];
                service = b[2];
                $1 = $2 = $3 = $4 = $5 = $6 = $7 = "";
                process = substr($0, 8);
                gsub(/^ +/, "", process);
                printf "%-15s %-10s %-20s %-30.30s %-10s\n", user, port, service, process, pid;
            }
        }'
    fi
}

# Function to display Docker information
display_docker() {
    if [ -z "$1" ]; then
        echo "Docker Images:"
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.Size}}" | format_table
        echo
        echo "Docker Containers:"
        docker ps -a --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" | format_table
    else
        echo "Details for Container '$1':"
        docker inspect $1 | jq '.[0] | {Name: .Name, Image: .Config.Image, State: .State.Status, IP: .NetworkSettings.IPAddress, Ports: .NetworkSettings.Ports}'
    fi
}

# Function to display Nginx information
display_nginx() {
    if [ -z "$1" ]; then
        echo "Nginx Domains and Ports:"
        grep -h server_name /etc/nginx/sites-enabled/* | awk '{print $2}' | sed 's/;//' | \
        while read domain; do
            port=$(grep -h listen /etc/nginx/sites-enabled/* | grep -v '#' | awk '{print $2}' | sed 's/;//' | head -1)
            echo -e "$domain\t$port"
        done | format_table
    else
        echo "Nginx Configuration for $1:"
        grep -R -A 20 "server_name $1" /etc/nginx/sites-enabled/* | sed 's/^/    /'
    fi
}

# Function to display user information
display_users() {
    if [ -z "$1" ]; then
        echo "Users and Last Login Times:"
        last -w | awk '!seen[$1]++ {print $1"\t"$4" "$5" "$6" "$7}' | format_table
    else
        echo "Details for User '$1':"
        id $1
        echo "Last Login: $(last -w $1 | awk 'NR==1 {print $4, $5, $6, $7}')"
        echo "Groups: $(groups $1)"
    fi
}


# Function to display activities within a time range
# Function to display activities within a time range
display_time_range() {
    if [ $# -eq 0 ]; then
        echo "Invalid parameter. Please provide a start date and optionally an end date."
        return 1
    elif [ $# -eq 1 ]; then
        start=$(date -d "$1" +"%Y-%m-%d 00:00:00")
        end=$(date -d "$1 + 1 day" +"%Y-%m-%d 00:00:00")
    elif [ $# -eq 2 ]; then
        start=$(date -d "$1" +"%Y-%m-%d 00:00:00")
        end=$(date -d "$2 + 1 day" +"%Y-%m-%d 00:00:00")
    else
        echo "Invalid request. Please provide a start date and optionally an end date."
        return 1
    fi

    echo "Activities between $start and $end:"
    journalctl --since "$start" --until "$end" | tail -n 50
}


# Main script logic
case "$1" in
    -p|--port)
        display_ports "$2"
        ;;
    -d|--docker)
        display_docker "$2"
        ;;
    -n|--nginx)
        display_nginx "$2"
        ;;
    -u|--users)
        display_users "$2"
        ;;
    -t|--time)
	shift     
        display_time_range "$@"
        ;;
    -h|--help)
        display_help
        ;;
    *)
        echo "Invalid option. Use -h or --help for usage information."
        exit 1
        ;;
esac

